
时间序列
date time 讲解

一、datetime模块

1.基本组合
from datetime import datetime
now=datetime.now()#获取现在的时间
now.year,now.month,now.day#分别为现在的年、月、日，奇怪的是返回为组合值。

2.时间差delta
delta=datetime(2011,1,7)-datetime(2008,6,24,8,15)
delta.day;delta.time#分别为差值的日、时间值

3.timedelta()日期差函数
start=datetime(2011,1,4)
start+timedelta(12)

4.字符串和日期值互换
#日期转为字符串
stamp=datetime(2001,1,3)
str.stamp#将文本转换为标准字符串，带day和time
stamp.strftime('%Y-%m-%d')#将日期为字符串格式，只有day。注意，这里年大写，月和日小写

#字符串提取为日期格式
value='2011-01-03'
datetime.strptime(value,'%Y-%m-%d')
#字符串转为日期是p，日期转为字符串是f

5.对多个日期转换
datestrs=['7/6/2001','8/6/2011']
[datetime.strptime(x,'%m/%d/%Y') for x in datestrs]

6.parser.parse
from deteutil.parser import parse
#字符串转为日期
parse('2011-01-03')
#dateutil能将几乎所有的字符串转为日期格式
parse('jan 31,1997 10:45 PM')
#可惜，中文不行

7.转换时日在月前
parse('6/12/2011',dayfirst=True)

8.to_datetime处理成组日期
pd.to_datetime(datestrs)

9.datetime函数定义
%Y 4位数年；%y 2位数年；%m 2位数月；%d 2位数日；%F %Y-%m-%d的简写；%D %m/%d/%y的简写


二、时间序列基础

1.构造时间序列
按日期构造1000个时间序列
longer_ts=Series(np.random.randn(1000),index=pd.date_range('1/1/2000',periods=1000))

2.选取某一年或某一月
longer_ts['2001']
longer_ts['2001-05']

3.切片选取
#取2001之后的
ts[datetime(2001,1,7):]
#取两日期之间的，前闭后开
ts['1/6/2011':'1/22/2011']

4.truncate用法
ts.truncate(after='1/9/2001')

5.对datetime操作
dates=pd.date_range('1/1/2000',periods=100,freq='W-WED')
long_df=DataFrame(np.random.randn(100,4),index=dates,columns=['Colorado','Texas','New York','Ohio']
#ix还能这么用！注意，后面的字符串是反过来的
long_df.ix['5-2001']

6.检查是否有重复索引
df.index.is_unique
#查看是哪一个
grouped=df.groupby(level=0)
grouped.count()

7.转换频率
ts.resample('D')
#把所有的‘日’补齐

8.生成日期频率date_range
index = pd.date_range('4/1/2012','6/1/2012')#这里是4月1日到6月1日。月和日的顺序又反过来了，真不习惯
pd.date_range(start='4/1/2012',periods=20)#生成开始后的20期数据
pd.date_range(end='6/1/2012',periods=20)#periods加s，表示复数。

9.生成每月最后一日数据M和最后一个工作日BM
pd.date_range('1/1/2012','12/1/2012',freq='M')
#这样不会出现每月30日和31日的错误，统一归为最后一日。

10.带有分钟的
pd.date_range('5/2/2012 12:34:12',periods=5,normalize=True)


三、时间频率
频率由一个基础频率和一个乘数组成，基础频率通常以一个字符串别名表示，对每个基础频率，都有一个被称为日期偏移量的对象与之对应。

1.M每月，H每小时，前面可以加数字，表示间隔
pd.date_range('1/1/2012','1/3/2012 23:59',freq='4h')
pd.date_range('1/1/2012',periods=10,freq='1h30min')

2.WOM日期：每月第几个星期几
rng=pd.date_range('1/1/2012','9/1/2012',freq='WOM-3FRI')

3.shift向前向后移动
ts.shift(2),ts.shift(-2)
ts.shift(2,freq='M')
ts.shift(3,freq='D'
#等价于 ts.shift(1,freq='3D')

4.时期及算术运算
p=pd.Period(2007,freq-'A-DEC')
p+5;p-2

5.时期的频率转换asfreq
p=pd.Period('2007',freq='A-DEC')
p.asfreq('M',how='start')#将其转换为2007最开始的一个月

6.合成日期index
data.year;date.quarter
index=pd.PeriodIndex(year=data.year,quarter=data.quarter,freq='Q-DEC')
data.index=index
data.infl

7.重采样（resampling）
rng = pd.date_range('1/1/2000',periods=100,freq='D')
ts=Series(randn(len(rng)),index=rng)
ts.resample('M',how='mean')

8.降采样（类似把1f数据规整为5f数据）
rng=pd.date_range('1/1/2000',periods=12,freq='T')
ts=Series(np.arange(12),index=rng)
ts.resample('5min',how='sum',closed='left')
#规整为5s数据，左边闭合（默认是右边闭合）。比如0，1，2，3，4，5，默认是1+2+……+4+5；更改为左边闭合就是0+1+2+3+4

9.OHLC重采样
ts.resample('5min',how='ohlc')

10.升采样
frame=DataFrame(np.random.randn(2,4),index=pd.date_range('1/1/2000',periods=2,freq='W-WED'),columns=['Colorado','Texas','New York','Ohio'])
frame[:5]
df_daily=frame.resample('D')
#填充值
frame.resample('D',fill_method='ffill')

11.在降采样中，目标频率必须是源频率的子时期（subperiod）;在升采样中，目标频率必须是源频率的超时期（superperiod）


四、时间序列绘图

1.基础
close_px_all=pd.read_csv(……)
close_px=close_px_all[['AAPL','MSFT','XOM']]

#对数据按照营业日期来整理，并按照前填充来做。
#疑问，外国的工作日和我国不同，直接用B来做会出错，那应该怎么维护？
#建立一个符合我国节假日的Series表？
close_px=close_px.resample('B',fill_method='ffill')

2.#任取一只来绘图
close_px['AAPL'].plot


3.#选取某一年，绘图三只
close_px.ix['2009'].plot()

4.取某一只的一段时间
close_px['AAPL'].ix['01-2011':'03-2011'].plot()

5.将日数据合并成季度数据plot
app_q = close_px['AAPL'].resample('Q-DEC',fill_method='ffill')
app_q.ix['2009':].plot()

6.移动平均rolling_mean
close_px.AAPL.plot()
pd.rolling_mean(close_px.AAPL,250).plot()
#默认情况下，rolling_mean需要指定数量

7.扩展窗口平均（expanding window mean）(对其概念不了解)
expanding_mean=lambda x: rolling_mean(x,len(x),min_periods=1)
#指定了x，x的长度，还有最小时期？
pd.rolling_mean(close_px,60).plot(logy=True)

8.指数加权窗口
#建立2*1，共享x、y的图，大小是12*7.
fig,axes=plt.subplot(nrows=2,ncols=1,sharex=True,sharey=True,figsize=(12,7))

#分别得出ma60和ewma60的值
aapl_px=close_px.AAPL['2005':'2009']
ma60=pd.rolling_mean(aapl_px,60,min_periods=50)
ewma60=pd.ewma(aapl_px,span=60)

#分别在0，1上画图
aapl_px.plot(style='k-',ax=axes[0])
ma60.plot(style='k--',as=axes[0])
axes[0].set_title('Simple MA')
aapl_px.plot(style='k-',ax=axes[1])
ewma60.plot(style='k--',as=axes[1])
axes[1].set_title('Exponentially-weighted MA')

五、进阶

1.二元移动窗口




2.自定义窗口




3.性能及内存










